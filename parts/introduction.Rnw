%
%  revised  introduction.tex  2011-09-02  Mark Senn  http://engineering.purdue.edu/~mark
%  created  introduction.tex  2002-06-03  Mark Senn  http://engineering.purdue.edu/~mark
%
%  This is the introduction chapter for a simple, example thesis.
%

Abstract

problem is important?
what have people done?
  2-3 sentences
what is missing?
  However, ...
we address this missing by...?
In this work, we fill this gap by BLAH using packages A, B, C.

3x more sentences describing each package
  ggduo does a gen pairs plot
  autocogs does X and addresses Y
  gqlr does A and bridges the gap of B

stress the importance of the contribution
  These three packages will address issues....



\chapter{Introduction}

% TODO turn abstract structure into a ``2-3'' paragraph introduction. 1 page
  % first paragraph describes why visualization is important. figure?
  % second. What is prior work?
  % third

Data visualization is a stiatistical tool that provides us with a story where traditional statistics may fall short.  John Tukey discribed this in his 1977 paper, \emph{Exploratory Data Analysis}:

\begin{pquotation}{John Tukey, \emph{Exploratory Data Analysis} \cite{tukey1977}}
``The greatest value of a picture is when it forces us to notice what we never expected to see.''
\end{pquotation}


% << datasaurus, echo = TRUE, cache = FALSE >>=
% @

\includegraphics[width = 0.4\textwidth]{./figs/dino.png}

\input{figs/dino_table.tex}

% \begin{figure}
%   \begin{tabular}{rl}
%     &
%   \end{tabular}
%   \caption{asdfasdf}
%   \label{fig:dino}
% \end{figure}
%
% << datasaurus_dozen_table, echo = FALSE, results = "asis" >>=
% @



\section{R?}

R \cite{R03} is the most widely used open source programming language and quickly becoming the top ranked data analysis tool \cite{r4stats_popularity} \cite{ieee_top_programming}. R is different from most other popular programming languages in that it is an interpretable language, rather than a compiled language.  Code is source and executed at run time, rather than precompiled for faster execution and type checking.

R has over 11,000 active, user submitted packages (as of Sept. 2017 \cite{r_packages}) and a number of more packages are in development on GitHub \cite{github}.  In this thesis, I develop and contribute to several R packages for providing effective visualizations of large-scale data sets to aid further statistical analysis, which include \GGally, \autocogs, \gqlr, and \trelliscopejs.  These packages will be described in greater detail throughout this thesis, but here I provide a brief summary and overview of their different functionalities.


\section{\rinline{ggduo}: Generalized pairs plot for two grouped data}

The R package \GGally~\cite{r_ggally}~provides several composite plots that build on the basic \ggplot~\cite{wickham2009ggplot2}~plotting system. \GGally~functions produce multivariate plots such as generalised scatterplot matrices, and parallel coordinate plots are provided, as well as network plots, survival models, and glyph maps for spatiotemporal data. I introduce a new function, \rinline{ggduo}, to produce generalized plots for two groups of variables (e.g. a matrix of $X$ variables and a matrix of $Y$ variables), as might be modeled by multivariate regression, canonical correlation analysis, or even multivariate time series.  It builds on the structure of the \rinline{ggmatrix} function used to produce the generalized pairs plot, \rinline{ggpairs}. The new function \rinline{ggduo} will help analysts to look at their data to support better modeling.



\section{\autocogs: Metrics enabling detailed interactive visualization of big data}

Multipanel display systems like Trellis Display have proven to be very effective tools for visualizing complex data sets in detail.  In Trellis Displays, data are broken into independent subsets and a visualization method is applied to each subset.  The result is a set of panels that are displayed in a grid, resembling a garden trellis.  When the size of the data becomes very large, it is often the case that there are too many panels for the analyst to consume at one time.  A simple idea put forth by John Tukey is to compute "cognostics", metrics that help bring different, interesting sets of panels in a display to the analyst's attention and allow the analyst to interactively sort and filter the panels.  Cognostics can include statistical summaries, descriptive variables, goodness-of-fit metrics, etc.  I will discuss ideas regarding default cognostic choices based on what is being plotted and will review an implementation of a large-scale multipanel display system with cognostics called \trelliscopejs.

\section{GraphQL: An R server implementation}

Since 2012, Facebook has developed GraphQL: a backend agnostic data query language and runtime.  GraphQL drastically reduces the number of server requests created by the browser by using a dynamic and nested query structure.  Using the Working Draft Specification for GraphQL, \gqlr~implements a full GraphQL server within R.  \gqlr~allows users to supply their own R functions to satisfy the data requirements of a GraphQL query generated by the browser.




\section{Related work}

  The following package descriptions are excerpts from their \emph{DESCRIPTION} files.

  % One of the most notible R packages is \ggplot, a data visualization package.  It was originally written by Hadley Wickham in 2005.  Since then, \ggplot~has become one of the most impactful R packages with over 6 million downloads \cite{depsy_ggplot2}.


%
%   S, a programming language created by John Chambers, is a
%   The R language is an interactive programming language derived from the S programming language.  S, like SAS, is a closed source platform.  John Chambers, the original for S, created R R is open source
%
% R
%   created from S language
%     Original S author is John Chambers while at Bell Labs
%     S is closed source, R is open source
%   R Core Development Team (includes John Chambers)
%   built for statistical computing
%   FUBU ... but statisticians

\subsubsection{\pkg{lattice}: Trellis graphics for R}

``A powerful and elegant high-level data visualization system inspired by Trellis graphics, with an emphasis on multivariate data. Lattice is sufficient for typical graphics needs, and is also flexible enough to handle most non-standard requirements.'' \cite{r_lattice}

\pkg{lattice} was the first R package to extend the graphing capabilities of R and internalize the trellis display \cite{trellisdisplay} at its core.  The Trellis display framework graphs variables conditioned on one or more variables across rows, columns, and pages.  This framework received its name for its visual similarity to a ``garden trellis'' layout.

\subsubsection{\ggplot: Create elegant data visualisations using The Grammar of Graphics}
% What is ggplot2
  ``\ggplot~is a system for declaratively creating graphics, based on \emph{The Grammar of Graphics}. You provide the data, tell \ggplot~how to map variables to aesthetics, what graphical primitives to use, and it takes care of the details.'' \cite{github_ggplot2} \cite{wickham2009ggplot2}

  Many R packages have been built upon the \ggplot~plot architechture.

\subsubsection{\GGally: Extension to \ggplot}
% What is ggplot2
  ``The R package \ggplot~is a plotting system based on the grammar of graphics. \GGally~extends \ggplot~by adding several functions to reduce the complexity of combining geometric objects with transformed data. Some of these functions include a pairwise plot matrix, a two group pairwise plot matrix, a parallel coordinates plot, a survival plot, and several functions to plot networks.'' \cite{r_ggally} \cite{github_ggally}


\subsubsection{\pkg{rbokeh}: R interface for Bokeh}

``A native R plotting library that provides a flexible declarative interface for creating interactive web-based graphics, backed by the Bokeh visualization library \url{http://bokeh.pydata.org/}.'' \cite{r_bokeh}

\subsubsection{\pkg{plotly}: Create Interactive Web Graphics via `plotly.js'}

``Easily translate \ggplot graphs to an interactive web-based version and / or create custom web-based visualizations directly from R. Once uploaded to a `plotly' account \cite{plotly}, `plotly' graphs (and the data behind them) can be viewed and modified in a web browser.
'' \cite{r_bokeh}


\subsubsection{\trelliscopejs: Create interactive Trelliscope displays}

``Trelliscope is a scalable, flexible, interactive approach to visualizing data. This package provides methods that make it easy to create a Trelliscope display specification for \trelliscopejs. High-level functions are provided for creating displays from within \pkg{dplyr}~or \ggplot~workflows. Low-level functions are also provided for creating new interfaces.'' \cite{github_trelliscopejs}


\subsubsection{\gqlr: GraphQL server in R}

``Server implementation of `GraphQL' \cite{graphql_spec}, a query language created by Facebook for describing data requirements on complex application data models.  Visit \url{http://graphql.org} \cite{graphql_org} to learn more about `GraphQL'.'' \cite{r_gqlr} \cite{github_gqlr}


% verbose description of figure 1.1
% <= 1 page in total
% describe how i built on them and how i am different from them.

% describe packages like ggplot2, rbokeh, plotly, lattice



\section{Thesis structure}

% TODO
in this section I outline the structure of this thesis.  In chapter 1 I will discuss... In chapter 2...

% TODO refer to the figture in the main text
% TODO mention things in bold are topics

There are three main components to this thesis as displayed in \ref{fig:structure}: displaying two grouped plot matrices using \rinline{ggduo} in \GGally, adding automatic cognostics with \autocogs, and communicating data between services with \gqlr.

In chapter \ref{chapter:ggduo}, I will blah.

In chapter \ref{chapter:autocogs}, autocogs.

In chapter \ref{chapter:gqlr}, gqlr.

% TODO explain all figure stucture information, ie arrow types and dotted boxes... basically explain the whole picture without the picture.



\begin{figure}
  \centering
  \includegraphics[width=\textwidth]{./dot/intro_hierarchy.png}
  \caption{Thesis Structure}
  \label{fig:structure}
\end{figure}
