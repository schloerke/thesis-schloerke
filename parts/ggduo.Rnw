
\section{Plot Matrix}

\rinline{ggduo} is continuation of prior work in the \GGally~R package.  In this section, I will cover background on the scatterplot matrix and generalized pairs plot matrix, and the \rinline{ggmatrix} object that generalized the plot matrix used in \rinline{ggduo}.


\subsection{Pairs Plot}

  As mentioned earlier in the chapter, \ggplot~is designed to allow plots to be built layer by layer and not rendered until a final print command is executed.  \ggplot~plot objects has some implementation rules it follows when facet'ing a plot.

  \begin{enumerate}
    \item Each faceted panel must share the same original X and Y columns.
    \item Each faceted panel's data must be independent of all other panels in the same plot.
    \item Each plot must be created with the same layers.
  \end{enumerate}

  Following these rules allows for the implementation of small multiples.  Small multiples are repetitions of plots with identical layers, but each plot is comprised of different data.  Small multiples were popularized by Dr. Edward Tufte in his 1983 paper Visual Display of Quantitative Information.  Any \rinline{facet_wrap} or \rinline{facet_grid} function will produce a plot containing small multiples.

  A pairs plot, originaly refered to as a ``draftsman's plot''
  % \cite{GraphicalMethods},
  violates all three principles of a small multiple.

  \begin{enumerate}
    \item Each panel is comprised of a different column combination.
    \item Each panel shares the same row information of the data.
    \item Each panel may be created with layers that are appropriate for the data types.
  \end{enumerate}


  Until the discussion of the Generalized Pairs Plot with Emerson et. al., all plots shared the same plot layers to utilize the idea of a small multiple.  However, this was not appropriate for discrete data being displayed by it's mapped numeric value.  In a discrete data versus discrete data plot, all of the points would be overplotted onto the unique discrete combinations.  This overplotting renders the discrete only pairs combinations unuseable.  The bottom right plots of $smoker$ and $day$ both display eight unique points, but do not convey that they really contain \Sexpr{nrow(tips)} points.

<< original_pairs >>=
pairs(tips[c("total_bill", "tip", "smoker", "day")])
@

  Emerson et.al. discussed using a generalized pairs plot to handle the mix of variable types by providing different plotting layers for different data types.  The generalized pairs plot displays the same collection of data using different axes but allows for a mix of plotting methods and both continuous and discrete plot axes.  This addresses the issue of overplotting in discrete columns when only displaying data in a scatterplot matrix.  Below are the two default plotting methods to handle the overplotting issue.  The \pkg{gpairs}~\cite{r_gpairs} R package is printed using \pkg{lattice}~graphics, while the \GGally~R package prints using \ggplot~graphics.

<< gpairs_intro >>=
gpairs::gpairs(tips[, c("total_bill", "tip", "smoker", "day")])
@

<< ggpairs_intro >>=
pm <- ggpairs(tips, c("total_bill", "tip", "smoker", "day"))
pm
@

\rinline{gpairs::gpairs} was originally built to handle the generalization of the pairs plot to include discrete data.  Unfortunately, this is written using \pkg{lattice}~graphics and does not utilize the \ggplot~framework.  \rinline{GGally::ggpairs} was originally written as an independent port of of \rinline{gpairs} to the \ggplot~framework but with portability and modularization kept in mind.

\rinline{ggpairs} addressed this by
\begin{enumerate}
  \item making each sub plot an indpenedently functioning \ggplot~plot
  \item allowing each sub plot to be replaced after the initial plot matrix is created
  \item not displaying the plot matrix until the \rinline{print} command is executed
\end{enumerate}

<< add_custom_plot >>=
# retrieve the second row, first column sub plot
#  of the tips plot matrix
pm[2,1]
new_plot <- ggally_text(
  "New\nPlot",
  aes(color = "red"),
  size = 10
)
new_plot
# insert the new plot into the second row, first column
#  of the tips plot matrix
pm[2,1] <- new_plot
# display the updated plot matrix
pm
@


\subsection{\rinline{ggmatrix}}

The \rinline{ggmatrix} object is used to handle two main situations: handle mixed plot scales and contain the necessary information for displaying a plot matrix.

\subsubsection{Plot Scales}

\ggplot~prevents discrete scales from being mixed with continuous scales.  Two different scales for the same axis is not possible in a single panel plot and \ggplot~is built on the small multiple princple of displaying similar scales in every faceted panel.   The ability to display different axes natively in the same plot matrix is not possible with \ggplot.  Only one scale type is used per ggmatrix panel.  This keeps the original `per panel' logic intact. Before the \rinline{ggmatrix} object, to produce two, related mixed axes plots in the same graphic could only be achieved using the \pkg{gridExtra}~\cite{gridExtra} or \pkg{grid}~\cite{r_project} R packages.  Both of these existing methods behaved like a side by side print method, rather than a native plot matrix.

<< grid_extra >>=
p1 <- pm[1,4]
p2 <- pm[2,4]
gridExtra::grid.arrange(p1, p2, ncol = 1)
@

\rinline{ggmatrix} allows for arbitrary scales per panel. When used properly, independently produced sub plots deliver common axes within each row and column.  This displays a cohesive and interpretable plot matrix structure.


\subsubsection{Display Information}

The necessary information includes the number of rows and columns, label information, \ggplot~display theme information,  how plot strips should be displayed, default plot data, and individual plot information.

<< str, size = "scriptsize" >>=
str(pm)
@

For memory optimization, each plot is stored as a function that will produce the \ggplot~plot at print time.  To do so, the dataset provided at \rinline{ggpairs} inception sets a default dataset to be used at print time.  If a new sub plot is stored after inception, the  full plot \ggplot~object is stored directly.



Similar to \ggplot's function \rinline{ggplot_gtable}, \rinline{ggmatrix_gtable} produces display only information that the \pkg{grid}~graphics framework uses to display the plot. To retrieve all necessary display information, \rinline{ggmatrix_gtable} executes \rinline{ggplot_gtable} for each sub plot individually, then extracts the required plotting display information (panel and possibly panel strips) from each sub plot.  These subplot panels are then placed into the final plot matrix.

The resulting plot matrix is displayed with the exact same styling as \ggplot's \rinline{facet_grid}. This returns all the display theme styling and display constraints back onto \ggplot. This means legends may be used.

<< ggpairs_legend >>=
# color the plots according to smoker
# display legend from the 3rd row, 1st column plot
pm <- ggpairs(
  tips, c("total_bill", "tip", "smoker", "day"),
  mapping = aes(color = smoker),
  legend = c(3,1)
)
pm
# display legend on bottom using ggplot2 theme
pm + ggplot2::theme(legend.position = "bottom")
@


\section{\rinline{ggduo}: Plot matrix for Two Grouped Data}

A definition of the pairs plot is that every column of the data is displayed against every other column.  This is great for full data exploration.  If a data frame had columns $A$, $B$, and $C$, there would be $3^2 = 9$ combinations produced: $A:A$, $A:B$, $A:C$, $B:A$, $B:B$, etc.. A pairs plot matrix can be generalized one step further by pairing two column groups against each other.

For the example just described, column set $\left\{ A, B, C\right\}$ are paired against the column set $\left\{ A, B, C\right\}$.  This would be a little silly, as that should produce a pairs plot.  However, it allows us to produce a plot matrix of the combinations of $\left\{ A, B, C\right\}$ and $\left\{ D, E\right\}$, or any combination of two independent column sets.  Using the same underlying \rinline{ggmatrix} functionality, \rinline{ggduo} produces plot combinations of two grouped data.

As a quick example, we may look at Australian children's fifth grade Math, Reading, and Science scores against their Sex and how many hours of Homework they completed.

<< ggmatrix_scores >>=
ggduo(
  australia_PISA2012,
  c("gender", "homework"),
  c("PV5MATH", "PV5READ", "PV5SCIE")
)
@

Comparing these two groups make sense as we would be interested if there is any difference in score output given a child's sex and homework time.  A \rinline{ggpairs} plot would create within and identity combinations as well as the between combinations of the \rinline{ggduo} plot.



\subsection{Column types}

\rinline{ggduo} inspects and displays the data columns according to their variable type: continuous or discrete. There are three plot type groups that an be made from these two options: continuous vs. continuous, continuous vs. discrete, and discrete vs. discrete. \rinline{ggduo}'s default plotting behavior for continuous vs. continuous is to produce a scatterplot with a loess smooth curve displayed on top of the points.
The default plotting behavior for discrete vs. discrete, is to summarize the data and display it as a mosaic plot.


The third group, continuous vs. discrete, will be refered to as a `combination plot'. \rinline{ggduo} makes a distinction between the two possible combination plots: continuous vs. discrete (vertical combination plot) and discrete vs. continuous (horizontal combination plot). By default, \rinline{ggduo} displays grouped histograms for a horizontal combination plot and grouped box plots for a vertical combination plot.
\rinline{ggpairs} is able to handle the combination plot differently for the upper and lower triangle using the the \rinline{upper} and \rinline{lower} arguments.  Unlike \rinline{ggpairs}, a distiction between a horizontal and vertical combination plot is made as there are no upper and lower triangle plot matrix sections in a \rinline{ggduo} plot.

<< ggpairs_types >>=
ggpairs(
  tips,
  c("total_bill", "smoker", "day", "tip"),
  upper = list(combo = "denstrip"),
  lower = list(combo = "facetdensity")
)
@

<< ggduo_types >>=
# default
ggduo(
  tips,
  c("size", "smoker", "day"),
  c("total_bill", "tip", "time")
)
# alter the vertically oriented combo plots
# alter the horizontally oriented combo plots
ggduo(
  tips,
  c("size", "smoker", "day"),
  c("total_bill", "tip", "time"),
  types = list(
    comboVertical = "denstrip",
    comboHorizontal = "facetdensity"
  )
)
@


\subsection{User Defined Functions}

There are many default plotting functions are provided by the GGally package, however they are not all encompassing.  The user may supply their own plotting functions for each panel type.  This allows for complete customization of every panel.  The violin plot is a combination style plot that is not included by default.  A user may create their own function that uses the function call API of \rinline{function(data, mapping, ...) { ... }}.  A sample custom function example is provided below.

<< user_defined >>=
my_violin <- function(data, mapping, ...) {
  ggplot(data = data, mapping = mapping) +
    geom_violin(...)
}
ggduo(
  tips,
  c("size", "smoker", "day"),
  c("total_bill", "tip", "time"),
  types = list(
    comboVertical = my_violin
  )
)
@



\section{\rinline{ggduo} in Practice}



\subsection{Canonical Correlation Analysis}
% * CCA

  Canonical correlation analysis (CCA) is a method to analyize the correlation between two matrices \cite{hotelling36cca}.  CCA can be directly displayed with \rinline{ggduo}.  Before \rinline{ggduo}, canonical correlation analysis did not have a cohesive plotting mechanism to visually display the associations of two sets of mixed type variables.  Before \rinline{ggduo}, examples used \rinline{ggpairs} to display all pairs of columns when only a subset of combinations are needed.  \rinline{ggpairs} is a perfect candidate for \emph{within} correlation for the explanatory variables and the response variables.  Whereas \rinline{ggduo} can be used to check the correlation \emph{between} the explanatory and response variables.

  The example below is altered from the UCLA Intstitute for Digital Research and Education \cite{UclaCCA}.  The website provided an example using \rinline{ggpairs} to analyse the \emph{within} corrleation.  Continuing their example, we can use \rinline{ggduo} to check the \emph{between} correlation.  The data consists of 600 records of three psychological variables, four academic variables, and the student's gender.  The psychological variables are treated as the response with the academic variables and gender as a predictor.  \rinline{ggduo} will be used to check the correlation between the two sets of columns.

<< ggduo_cca >>=
ggduo(
  psychademic,
  c("motivation", "locus_of_control", "self_concept"),
  c("read", "write", "math", "science", "sex"),
  showStrips = FALSE,
  types = list(continuous = "smooth_lm")
) +
  labs(
    title = "Between Academic and Psychological Variable Correlation Analysis",
    x = "Psychological",
    y = "Academic"
  )
@



  \subsection{Multiple Time Series Analysis}
  % * Time Series
  %   * break temporal components

<< elec_demand, echo = FALSE >>=

fpp2::elecdemand %>%
  as_data_frame() %>%
  mutate(
    WorkDay = factor(c("No", "Yes")[WorkDay + 1], levels = c("Yes", "No")),
    # Time = zoo::as.Date(zoo::as.Date(time(elecdemand)))
    Year = 2014,
    Day = rep(1:365, each = 48),
    HighUsage = c("below", "above")[(Demand > median(Demand)) + 1]
  ) %>%
  filter(Day <= 100) %>%
  mutate(Time = as.Date(Day, origin = "2014-01-01")) ->
elec_median

@


  A time series plot displays the time axis on the X axis with multiple columns on the Y axis.  The \pkg{stats}~\cite{r_stats}~package has a \rinline{ts.plot} function that currently allows for multiple time series to be printed in a single panel sharing the same axes.  Displaying the data on the same axis does not make sense in all cases.  This can be seen when looking at half-hourly eelctricity demand for Victoria, Australia, in 2014.  The electricity demand and temperature should not be displayed on the same scales, as they do not have similar units.  Including the $WorkDay$ boolean does not add to the understanding of the plot.

<< stats_ts >>=
stats::ts.plot(fpp2::elecdemand)
@


  By splitting the multiple time series plot along the Y axis, we can display multiple panels with different Y axes with a shared X axis using \rinline{ggduo}. This can be done with \rinline{ggts} which wraps to \rinline{ggduo} with the X column label turned off by default and a plot X label of `time'.  An extra column of the counts of above or below median demand has been added to display mixed Y axes.


<< ggduo_ts >>=
ggts(
  elec_median,
  mapping = aes(color = WorkDay),
  columnsX = "Time",
  columnsY = c("Demand", "Temperature", "HighUsage"),
  columnLabelsY = c(
    "Demand",
    "Temperature",
    "Demand Counts\nAbove Median  |  Below Median"
  ),
  legend = c(3,1),
  showStrips = FALSE,
  types = list(
    comboHorizontal = wrap("facethist", binwidth = 1),
    continuous = wrap("smooth_loess", alpha = 0.1)
  )
)
@


\subsection{Multiple Regression Diagnostics}

% * Regression
%   * marginal model
%   * residuals
%   * cooks distance
%   * (other 'y' sections)

With the basis of \rinline{ggduo} displaying each row of the data in every panel with different functions, \rinline{ggduo} quickly extends to model diagnostics. There are many readily available diagnostics that can be calculated for each row of explanatory data. By default, \rinline{ggnostic} (a function that wraps around \rinline{ggduo}) looks at the residuals, leave one out sigma value, leverage points, and Cook's Distance. Each diagnostic information is plotted against all explanatory variables used in the model.

Using the flea dataset from the \GGally~package, we can try to fit a model to determine the size of the flea's head.  Using \rinline{stats::step} to determine a good fitting model, the default model diagnostics are displayed against $species$, $tars1$, $tars2$, and $aede$. The residuals have a 95\% confidence interval in dashed lines and a solid line at 0. The leave one out sigma value displays a solid line for the current model's sigma value. The leverage points (diagonal of the hat matrix) are centered around the solid, expected line at $p / n$ and have a dashed, significance line at $2 * p / n$ \cite{kutner_linear_models}. Finally, the Cooks's distance has a grey dashed, significance line at $F_{p, n - p}(0.5)$ \cite{kutner_linear_models}. Each solid line corresponds to the expected value and each dashed line corresponds to a signifigance cuttoff value. The asterisks in the $X$ axis strips corresponding to the significance of an anova $F$ test.

<< ggnostic >>=
flea_model <- step(lm(head ~ ., data = flea), trace = FALSE)
ggnostic(flea_model)
@

The model diagnostics can be extended further by coloring and grouping according to $species$ and displaying the fitted values.

<< ggnostic_complex >>=
ggnostic(
  flea_model,
  mapping = aes(color = species),
  columnsY = c(".fitted", ".resid", ".std.resid", ".hat", ".cooksd"),
  combo = list(
    .fitted = wrap(ggally_box_no_facet, outlier.shape = 21),
    .resid = wrap(ggally_nostic_resid, outlier.shape = 21),
    .std.resid = wrap(ggally_nostic_std_resid, outlier.shape = 21),
    .hat = wrap(ggally_nostic_hat, outlier.shape = 21),
    .cooksd = wrap(ggally_nostic_cooksd, outlier.shape = 21)
  )
)
@

  % * Interaction
  %   * plot.ly
  %   * Ties back to cleveland's linked scatterplots






% \section{Future Direction}
% % * (<= 1 pages)
% Currently all individual plots are rendered at run time. With \ggplot~being known for having slower print speeds (cite?), this could be problimatic.  Currently, $n * m$ individual plots are printed.
% currently printing n*m plots takes time.
%
%
% Link up with the javascript packages for interactive plot matricies. Would be great to add a one more line of code to turn it into an interactive plot.


% \section[Discussion]{Discussion}
% % * (<= 1 pages)
% %   * pros and cons
% Pros
%   single line of code to produce a composite plot matrix
%   works well with wide data
% Cons
%   takes longer time to print with larger data
%   prints m*n ggplots to produce a single m*n plot matrix
%
% %   * origin and why it came about
%   ggmatrix
%     was a feature request to handle different length and different column plot matrix
%     users wanted to place custom plots in a custom arrangement
%   ggduo came about
%     was a feature request to have a ggmatrix version of the TeachingDemos::pairs2 function.
%
% %   * what we can not achieve with the ggmatrix / ggduo
% Can not achieve a forced cohesive scale to be used on all plots in a row or column
