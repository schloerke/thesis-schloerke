%
%  revised  introduction.tex  2011-09-02  Mark Senn  http://engineering.purdue.edu/~mark
%  created  introduction.tex  2002-06-03  Mark Senn  http://engineering.purdue.edu/~mark
%
%  This is the introduction chapter for a simple, example thesis.
%

Abstract

problem is important?
what have people done?
  2-3 sentences
what is missing?
  However, ...
we address this missing by...?
In this work, we fill this gap by BLAH using packages A, B, C.

3x more sentences describing each package
  ggduo does a gen pairs plot
  autocogs does X and addresses Y
  gqlr does A and bridges the gap of B

stress the importance of the contribution
  These three packages will address issues....



\chapter{Introduction}

Statistical visualizations of large-scale data has become an increasingly irreplaceable task in the era of \emph{big data}. In particular, exploratory data analysis and visualization is the first step to in-depth statistical modeling and analysis. Since its release in 2000, the R programming language and environment \cite{r_project} has arose as a powerful and convenient platform for performing data analysis and visualization. Various successful implementations have achieved in building a scientific visualization library in R, including \pkg{lattice}~\cite{r_lattice}, \ggplot~\cite{r_ggplot2}, \pkg{rbokeh}~\cite{r_bokeh}, and \pkg{plotly}~\cite{r_plotly}, to name a few.
\pkg{lattice}~implements \emph{trellis} graphics for R with powerful yet elegant high-level data visualization functions emphasizing on mutivariate displays.
\ggplot~deconstructs higher level plots into a lower level of data visualization grammar using layered graphics which facilitate publication-ready data visualization.
% \ggplot's modular static layer design has provided interactive web visualization R packages \pkg{rbokeh} and \pkg{plotly} a solid grammar foundation upon which to build from.
In this thesis, I develop
  (i) \rinline{ggduo}, an R function that produces generalized plots for two groups of variables,
  (ii) \autocogs, an R package that automatically generates cognostics for a set of plots, and
  (iii) \gqlr, an R package which implements the GraphQL data query application protocol interface.


\section{\rinline{ggduo}}

\ggplot~offers a powerful graphics language for creating elegant and complex plots, however it has certain limitations. For instance, it does not allow the displaying of datasets with mixed scales (e.g., simultaneously display discrete and continuous scales) on the same axis.
To incorporate this functionality, the R package \GGally~provides several composite plots (i.e., multi-layered plots) that build on the basic \ggplot~\cite{r_ggplot2}~plotting framework. %  and combine to produce mixed variable type plot matricies
\GGally~functions produce multivariate plots such as generalized scatterplot matrices, and parallel coordinate plots are provided, as well as network plots, survival models, and glyph maps for spatiotemporal data.
One important functionality in \GGally is \rinline{ggpairs}. \rinline{ggpairs} an implementation of the generalized pairs plot which displays a plot matrix (all bivariate combinations of a single set of variables) that allows for a mixture of both continuous and discrete variable types using the \ggplot plotting framework. \rinline{ggpairs}'s plot matrix was generalized one step further to a generalized plot matrix which handles arbitrary \ggplot~plot objects in a variable number of rows and columns.

In the first part of this thesis, I introduce a new function, \rinline{ggduo} that builds on the structure of the \rinline{ggmatrix} function used to produce the generalized pairs plot, \rinline{ggpairs}.
Specifically, \rinline{ggduo} produces generalized plots for two groups of variables (e.g. a matrix of $X$ variables and a matrix of $Y$ variables), as might be modeled by multivariate regression diagnostics, canonical correlation analysis, or even multivariate time series.  For the case of multivariate regression diagnostics, I develop \rinline{ggnostic} which displays common linear model diagnostic data against each of the model's explanatory variables. Figure \ref{fig:intro_ggnostic} shows an example of \rinline{ggnostic}.  This plot would not have been possible in either \pkg{lattice}~or \ggplot~due to the mixture of axis scales and would have been uninformative if rendered using \rinline{ggpairs}. I believe that the new function \rinline{ggduo} will help analysts to look at their data to support better modeling.

<< intro_ggnostic, echo = FALSE, fig.cap = "asdfasdf" >>=
GGally::ggnostic(
  step(lm(head ~ ., data = GGally::flea), trace = FALSE),
  mapping = ggplot2::aes(color = species),
  columnsY = c(
    ".resid", ".sigma", ".hat", ".cooksd"
  ),
  continuous = list(
    default = GGally::ggally_smooth_lm
  ),
  combo = list(
    .resid = GGally::wrap(GGally::ggally_nostic_resid, outlier.shape = 21),
    .sigma = GGally::wrap(GGally::ggally_box_no_facet, outlier.shape = 21),
    .hat = GGally::wrap(GGally::ggally_nostic_hat, outlier.shape = 21),
    .cooksd = GGally::wrap(GGally::ggally_nostic_cooksd, outlier.shape = 21)
  )
)
@





\section{\autocogs}

To examine the difference between independent subsets of the same dataset, Edward Tufte  introduced the notion of \emph{small multiples} using \emph{trellis displays} \cite{small_multiples}. In trellis displays, data are separated into independent subsets and a consistent visualization method is applied to each subset. The result is a set of panels that are displayed in a grid, resembling a garden trellis.
These multi-panel display systems have proven to be very effective tools for visualizing complex data sets in detail.   However, when the count of data subsets becomes very large, it is often the case that there are too many panels for the analyst to consume at one time.  A simple idea put forth by John Tukey \cite{Tukey1985} is to compute \emph{cognostics}, metrics that help bring different, interesting sets of panels in a display to the analyst's attention and allow the analyst to interactively sort and filter the panels.  Cognostics can include statistical summaries, descriptive variables, goodness-of-fit metrics, etc.

Groups of cognostics and ggplot2 layers are intimately connected.  For instance, a simple histogram in \ggplot~is created via a single histogram layer and is associated with four cognostic groups: univariate continuous cognostics, density cognostics, histogram cognostics, and count cognostics.
In the second part of this thesis, I develop \autocogs~\cite{r_autocogs}, an R package which automatically produces sets of standard cognostic groups that would be commonly useful to the data analyst given their supplied visualization objects.
TODO - Figure … shows a  …. (TODO) (Figure here of the figure and output figure  + table?).
As an application, we demonstrate how autocogs can greatly enhance the functionalities of  \trelliscopejs~\cite{r_trelliscopejs}.
TODO - explanation of  \trelliscopejs
While it is possible to manually specify all the cognostics in \trelliscopejs, \autocogs~greatly simplifies the user experience by automatically providing default groups of cognostics complimentary to the panel visualization.


\section{gqlr}

In 2012, Facebook began development of GraphQL, a backend agnostic data query language and runtime.  Data query API that allows data to be queried without requiring knowledge how the data is stored.  In doing so, GraphQL drastically reduces the number of server requests created by the browser by using a dynamic and nested query structure.
For instance, when inspecting the names of a person's friends of their friends, it would normally require $O(n^2)$ query commands to finally realize the full answer.  With GraphQL, the dynamic query structure allows for the full request to be sent to the server and a single, albeit, larger answer is returned.  The submitted query command is separated from the actual backend service, moving the implementation complexity to the data backend service rather than the query submission process.
Figure \ref{figs:intro_graphql} displays the reduction in communication between a web browser client and the data server for both a Naive \emph{REST} implementation and a GraphQL implementation.  the naive rest implementation requires $O(n^2)$ communications with the data server, while GraphQL executes a single communication with a single return value.
By decoupling the data servers with web pages, the development cycles of both the web pages and data servers are improved.
However, there is no prior interface of GraphQL to R. Therefore, in the third part of this thesis, I develop the \gqlr~R package, which implements a full GraphQL server within R.  \gqlr~allows R users to supply their own functions to satisfy the data requirements of a submitted GraphQL query, thus enjoying the rapid iteration time of R and production iteration time of GraphQL.


\begin{figure}
  \centering
  \includegraphics[width=\textwidth]{./figs/graphql_communication.pdf}
  \caption{Time passes from top to bottom in this communication graph.  In ``friends of my friends'' example, the Naive REST implementation requires $O(n^2)$ queries, while the GraphQL implementation solves the example query in a single communication to the data server.}
  \label{figs:intro_graphql}
  % \vspace{10pt}
  \bigskip
\end{figure}








%
%
% \section{Related work}
%
% % verbose description of figure 1.1
% % <= 1 page in total
% % describe how i built on them and how i am different from them.
%
% % describe packages like ggplot2, rbokeh, plotly, lattice
%
%
%
% \section{Thesis structure}
%
% % TODO
% in this section I outline the structure of this thesis.  In chapter 1 I will discuss... In chapter 2...
%
% % TODO refer to the figture in the main text
% % TODO mention things in bold are topics
%
% There are three main components to this thesis as displayed in \ref{fig:structure}: displaying two grouped plot matrices using \rinline{ggduo} in \GGally, adding automatic cognostics with \autocogs, and communicating data between services with \gqlr.
%
% In chapter \ref{chapter:ggduo}, I will blah.
%
% In chapter \ref{chapter:autocogs}, autocogs.
%
% In chapter \ref{chapter:gqlr}, gqlr.
%
% % TODO explain all figure stucture information, ie arrow types and dotted boxes... basically explain the whole picture without the picture.
%


\begin{figure}
  \centering
  \includegraphics[width=\textwidth]{./dot/intro_hierarchy.png}
  \caption{Thesis Structure}
  \label{fig:structure}
\end{figure}
