\section{Automatic cognostics for data visualization}

From a data plotting perspective, we should be able to utilize what is already being displayed in the plot to sort and filter the panels of a \trelliscopejs~widget.  This plot information is not readily available as it is calculated within each plotting mechanism.

Using the prior \trelliscopejs~example in figure~\ref{fig:trelliscopejs}, the minimum and maximum values for each country's life expectancy were calculated manually.  While the prior example only retrieved the minimum and maximum life expectancy values for each panel, the median and mean values may be of interest as well. These statistics are only looking at the $Y$ variable.  There are many more statistics involving both the $Y$ variable and the $X$ variable.  In figure~\ref{fig:add_metrics}, the $X$ and $Y$ covariance and correlation are added.  A linear model (\rinline{geom_smooth(method = "lm")}) is also added to visually detect linear trend deviations.

<< add_metrics, screenshot.opts = list(vwidth = 700, vheight = 525), fig.cap = "More cognostics are added to the original example.  As more cognostics are added, the percentage of final code written is more about cognostics and not data visualization." >>=
gapminder_condensed %>%
  mutate(
    # add metrics
    min_lifeExp = purrr::map_dbl(data, function(dt) min(dt$lifeExp)),
    mean_lifeExp = purrr::map_dbl(data, function(dt) mean(dt$lifeExp)),
    median_lifeExp = purrr::map_dbl(data, function(dt) median(dt$lifeExp)),
    max_lifeExp = purrr::map_dbl(data, function(dt) max(dt$lifeExp)),
    cov = purrr::map_dbl(data, function(dt) cov(dt$year, dt$lifeExp)),
    corr = purrr::map_dbl(data, function(dt) cor(dt$year, dt$lifeExp)),

    # add panel
    panel = trelliscopejs::map_plot(data, function(dt) {
      # display a line plot of X:year, Y:life expectancy
      ggplot(dt, aes(year, lifeExp)) +
        geom_smooth(method = "lm") + # add a linear model
        geom_line() +
        ylim(20, 85)
    })
  ) %>%
  # remove the condensed data
  select(-data) %>%
  print() ->
gap_trellis_plus

gap_trellis_plus %>% trelljs("gapminder_plus")
@

The amount of work to retrieve information that can be readily seen or calculated from the visual display quickly increases.  At first, there were two values used.  Now there are six values used to explain just the $Y$ data and the $\left\{X,Y\right\}$ combination.  None of the added metrics explain the linear model added to each panel.  As the amount of layers increase, the number of cognostics needed to explain the plot layer will also increase.  Given each plotting panel already contains many statistical cognostics, each panel should be leveraged to generate cognostics automatically.



\subsection{Linear model example}
\label{subsec:linear_model}


Using the panel column only, we will automatically derive many cognostics from each panel using the \autocogs~R package.

<< autocogs_first >>=
gapminder %>%
  group_by(country, continent) %>%
  tidyr::nest() %>%
  mutate(
    panel = trelliscopejs::map_plot(data, function(dt) {
      # display a line plot of X:year, Y:life expectancy
      ggplot(dt, aes(year, lifeExp)) +
        geom_smooth(method = "lm") +
        geom_line() +
        ylim(20, 85)
    })
  ) %>%
  select(-data) %>% # remove the condensed data
  print() ->
gap_panel

autocogs::add_panel_cogs(gap_panel)
@

For each panel, \rinline{2 + 19 + 5 + 5 + 2 + 5 = 38} cognostics were auto generated to aid in exploration of the panels.

  \begin{itemize}
    \item Ten of the cognostics calculate information individual column information. (\rinline{_x}, \rinline{_y})
    \item Two cognostics calculate continuous bivariate metrics. (\rinline{_bivar})
    \item Five cognostics calculate metrics involving the number of points and their availbility. (\rinline{_n})
    \item Two cognostics calculate metrics for the smooth line added to each panel. (\rinline{_smooth})
    \item Nineteen cognostics are calculated for the linear model applied to the panel.  These metrics will be dicussed in greater detail later. (\rinline{_lm})
  \end{itemize}

Each univariate grouping is labeled to provide context as to what is calculated and which variables were used.


\subsection{Framework}

% TODO should other packages be talked about here?
\autocogs~package is built to provide a consistent framework for calculating cognostics independent of the class of the plotting object supplied.  Ideally, it should work for \ggplot, \pkg{rbokeh}~\cite{r_bokeh}, \pkg{plotly}~\cite{r_plotly}, etc. and produce the same result for similar plot displayed in the different plotting packages.  Currently, only \ggplot~hooks have been installed, but \pkg{rbokeh}~and \pkg{plotly}~can be added using the publically available functions in the \autocogs~package.


By definition, each subset panel within a \trelliscopejs~widget will contain the same plotting layers, but with different data.  Addressing each layer will produce the same group of output cognostics but with different values.  There is a ``one to many'' mapping from plot to plot layers and a ``one to many'' mapping from each plot layer to the cognostic groups.  The same final cognostics may be produced from many different layers.

\includegraphics[width = \textwidth ]{./dot/plot_layers.png}

Once all the cognostics have been produced for a given plot, the cognostic groups are reduced to keep only the unique cognostic name and value combinations.  Using the diagram above, the cognostic groups $\left\{A, B, ..., M\right\}$ will only be returned once.











\subsection{Cognostic groups}

Each set of cognostics is returned in a cognostic group.  This is similar to scagnostics.  All scagnostics pertain to scatterplots.  Likewise, the number of non-NA $X$, non-NA $Y$, and non-NA $X$ and $Y$ points pertain to non-NA counts of the displayed data.  These groups can be extended to each type of statistical display: box plot, histogram, linear model, etc.

The cognostics produced in the \autocogs~\rinline{gapminder} linear model example in subsection~\ref{subsec:linear_model} were:
\begin{itemize}
  \item \rinline{_smooth}: Two cognostics pertaining to a ``smooth'' line being added to the panel.
  \item \rinline{_lm}: Nineteen cognostics pertaining to the linear model line added to the panel.
  \item \rinline{_x, _y} Five cognostics pertaining only to the X and Y values respectively.
  \item \rinline{_bivar} Two cognostics pertaining only to both the X and Y values.
  \item \rinline{_n} Five cognostics pertaining only to counts of X and Y values.
\end{itemize}

Each cognostic group column contains a single row \rinline{data.frame} nested in each cell.  Nesting data structures as list-columns~\cite{r4ds} is considered an advanced R technique, but by nesting the cognostic \rinline{data.frame}s in each cell, \autocogs~maintains the tidy data input with tidy data cognostics.  Tidy data is defined to have variables in each column, observations for each row and each cell contains a value.  The value does not need to conform to atomic values which allows for complex structures as long as the ``tidy data'' rules are maintained.


\begin{figure}[H]
  \centering
  \includegraphics[width=0.9\textwidth]{figs/tidy.png}
  \caption{Figure courtesy of~\cite{r4ds}. There are three rules to tidy data: columns contain variables, rows contain observations, and cells contain values.}
\end{figure}












\section{Cognostic groups}

There are three main types of cognostic groups: Univariate, Bivariate, and Counts.  Each type of cognostic group will explain in detail their corresponding cognostic groups in detail throughout this section.

\subsection{Univariate}

The univariate cognostic groups examples will use the same data set of the maximum life expectancy of the \rinline{gapminder} data set.

<<>>=
gapminder %>%
  group_by(country, continent) %>%
  summarise(lifeExp = max(lifeExp)) %>%
  print() ->
gap_max
@


\subsubsection{Univariate Continuous Cognostics}

  Univariate continuous cognostics utilize the standard statistical calculations: minimum, maximum, mean, median, and variance.  Each value is quickly interpretable and provides a good starting point when filtering panels within a \trelliscopejs~widget.

<< cog_group_univariate_continuous >>=
library(autocogs)
auto_cog("univariate_continuous", gap_max$lifeExp)
@

\subsubsection{Univariate Discrete Cognostics}

  Univariate discrete values only have counts and names to determine the cognostics.  The minimum and maximum count values are reported, as well as the mean count value.  For both the minimum and maximum values, a corresponding name is reported alongside the count.  The example below shows that the continent \rinline{"Africa"} contains the most countries at \rinline{52} and \rinline{"Oceania"} contains least amount of countries at \rinline{2} countries.

<< cog_group_univariate_discrete >>=
auto_cog("univariate_discrete", gap_max$continent)
@

  \subsubsection{Continuous Density Cognostics}

  Continuous density cognostics revolve around the shape of the density.  The maximum density value and its corresponding location are returned for comparison across cognostic calculations. Skew and kurtosis~\cite{casella2002statistical} are computed to help distinguish the density shape.  The p value of Hartigans' dip test from \pkg{diptest}~\cite{r_diptest} for unimodality is reported as well.  To help locate where the maximum density occurs, the maximum density value and location are provided.  Finally, the number of clusters may be calculated using the \pkg{mclust}~\cite{r_mclust_1}~\cite{r_mclust_2} R package.  Cluster calculations are not included by default due to their slower computational speed.


<< cog_group_density_continuous >>=
auto_cog("density_continuous", gap_max$lifeExp, clusters = TRUE)
@


  \subsubsection{Boxplot Cognostics}

  Boxplot metrics include lower whisker, Q1, median, Q3, and upper whisker locations.  The number of outliers above the boxplot and below the boxplot are also reported.

<< cog_group_boxplot >>=
auto_cog("boxplot", gap_max$lifeExp)
@

  \subsubsection{Quantile Quantile Cognostics}

Quantile-Quantile plots display the theoretical distribution quantiles verses the sample quantile points.  Two variables to help determine skewness count how many points are above and below a non robust quantile line.  The non robust quantile line is calculated using the $25^{th}$ and $75^{th}$ percentiles of sample points, rather than the a robust linear model.  This calculation replicates the base R function \rinline{stats::qqline} behavior.  A p value for the Kolmogorov-Smirnov test is added to the result to determine how close the sample points come from the test distribution.  The test distribution defaults to the normal distribution.  Finally, a mean squared error from the quantile line is reported for the Quantile-Quantile plot.  This value should be comparable to all of the independent samples as each sample should come from the same distribution.  Larger mean squared error values help discover outliers in the distribution.

<< cog_group_quantile_quantile >>=
auto_cog("quantile_quantile", gap_max$lifeExp)
@



\subsection{Bivariate}

The cognostic groups below is calculated using the \rinline{gapminder} data set where continent equals \rinline{"Americas"} (\rinline{americas}) or where country equals \rinline{"United States"} (\rinline{usa}).

<< gap_americas >>=
americas <- gapminder %>% filter(continent == "Americas")
usa <- gapminder %>% filter(country == "United States")
@

  \subsubsection{Bivariate Continuous Cognostics}

Similar to the Univariate Continuous cognostic group, the Bivariate Continuous cognostic group calculates the two standard bivariate summary statistics: covariance and correlation.

<< cog_group_bivariate_continuous >>=
auto_cog("bivariate_continuous", usa$year, usa$lifeExp)
@

\subsubsection{Scagnostics Cognostics}

Scatterplot scagnostics are a pre-existing cognostic group for a continuous bivariate plot. The following scagnostics are explained in more detail in~\cite{scagnostics}.

\begin{itemize}
  \item Outlying: the proportion of the total edge length due to extremely long edges connected to points of single degree.
  \item Skewed: the distribution of edge lengths of a minimum spanning tree gives us information about the relative density of points in a scattered configuration.
  \item Clumpy: the Hartigan and Mohanty RUNT statistic is most easily understood in terms of the single-linkage hierarchical clustering tree called a dendrogram.
  \item Sparse, the 90\% quantile of the edge lengths of the minimum spanning tree.
  \item Striated: the summation of angles over all adjacent edges of a MST.
  \item Convex: the ratio of the area of the alpha hull and the area of the convex hull.
  \item Skinny: the ratio of perimeter to area of a polygon measures.
  \item Stringy: the ratio of width to length of a network.
  \item Monotonic: squared Spearman correlation coefficient.
\end{itemize}

<< cog_group_scagnostics >>=
auto_cog("scagnostics", americas$year, americas$lifeExp)
@

  \subsubsection{Continuous 2D Density Cognostics}

The Continuous 2-Dimensional Density cognostic group reports the maximum density.  Similar to the Continuous Density cognostic group, the $X$ and $Y$ location are returned.  Cluster count calculations are turned off by default due to slow computation speed.


<< cog_group_density_2d_continuous >>=
auto_cog(
  "density_2d_continuous",
  americas$year, americas$lifeExp,
  clusters = TRUE
)
@

\subsubsection{Bivariate Step Cognostics}

A stepwise plot displays a ``stair case'' like plot where the connecting line only moves in parallel ot the $X$ or $Y$ axis.  The Bivariate Step cognostic group returns the number of steps completed, as well as calculating the Univariate Continuous cognostics for the step width and step height.

<< cog_group_bivariate_step >>=
auto_cog("bivariate_step", usa$year, usa$lifeExp)
@

\subsubsection{Smooth Line Cognostics}

The Smooth Line cognostic group is a baseline for all model based lines added to a plot.  The smooth line calculations pair well with the Linear Model and Loess Model cognostic groups.  A mean squared error and the max deviation with its corresponding location are reported.

<< cog_group_smooth_line >>=
auto_cog("smooth_line", usa$year, usa$lifeExp)
@


\subsubsection{Linear Model Cognostics}

Linear Model cognostics leverage many existing statistics.  Knowing that the model will only be a simple linear model allows \autocogs~to return slope and intercept values and corresponding p values.  Many cognostics can be generated about the model fit using known diagnostic methods:
  \begin{itemize}
    \item $R^2$: fraction of variance explained by the model
    \item $\sigma$: square root of the estimated residual variance
    \item $F$-statistic: the linear model's $F$-statistic and corresponding p value.
    \item Degrees of freedom: how many degrees of freedom in the model and residuals
    \item Log-likelihood value: the log likelihood value of the model
    \item AIC, BIC: Akaike's Information Criterion and Schwarz's Bayesian Criterion
    \item Deviance: the quality-of-fit statistic of the model
  \end{itemize}

  There are a few extra diagnostics that perform extra calculations to conform to the univariate requirement of a cognostic.

  \begin{itemize}
    \item Cook's distance: a combination of each points leverage and residual value.  Values larger than $F_{p, n - p}(0.5)$ indicate influential data points in the model~\cite{kutner_linear_models}.  The number of influential data points is reported.
    \item Influence points: the diagonal of the Hat Matrix is how much influence a point has on the model.  Each point is expected to equal $\dfrac{p}{n} = \dfrac{1}{n}$, with influential points having a value larger than $\dfrac{2 * p}{n} = \dfrac{2}{n}$~\cite{kutner_linear_models}.  The sum of all influential points is reported.
    \item Shapiro-Wilk test: when using a linear model, the residuals are assumed to come from a normal distribution. The Shapiro-Wilk test tests the residuals against the normal distribution~\cite{kutner_linear_models}.  The corresponding p value is reported.
    \item Box Cox power transformation: the lower and upper bounds of the 95\% confidence interval of the Box Cox power transformation are reported. This transformation is used to  stabilize the variance of a linear model. If the confidence interval contains 0, a $ln$ transformation may be used~\cite{kutner_linear_models}.
  \end{itemize}


<< cog_group_linear_model >>=
auto_cog("linear_model", usa$year, usa$lifeExp) %>% as.data.frame()
@

  \subsubsection{Loess Model Cognostics}

  Similar to the linear model, a simple loess model is calculated and the model diagnostics are reported:
  \begin{itemize}
    \item Supplied parameters: the supplied parameters of \rinline{span}, the alpha parameter which controls the degree of smoothing, and \rinline{degree}, the polynomial degree used in the loess model, are returned.
    \item Calculated parameters: the effective number of parameters, \rinline{enp}, is returned along with the trace of the hat matrix, \rinline{trace.hat}.  Finally, the sigma value, \rinline{s}, of the loess model variance is returned as a single cognostic.
    \item Iterations: The number of iterations needed to calculate the model are reported as well.
  \end{itemize}

<< cog_group_loess_model >>=
auto_cog("loess_model", usa$year, usa$lifeExp)
@


\subsection{Counts}

The third cognostic type addresses counts of binned data.

  \subsubsection{Univariate and Bivariate Count Cognostics}

  Both the Univariate and Bivariate Count cognostics address how many values are \rinline{NA} and not \rinline{NA}.  Bivariate accounts for both the logical AND and OR of the $X$ and $Y$ values being \rinline{NA}.

<< cog_group_univariate_counts >>=
auto_cog("univariate_counts", americas$lifeExp)
auto_cog("bivariate_counts", americas$year, americas$lifeExp)
@




\subsubsection{Pairwise Counts Cognostics}

Pairwise Counts cognostics address how often pieces of information occur.  Pairwise Counts look at the combinations of the $X$ and $Y$ variables.  The Univariate Continous cognostics are reported on the counts of the pairwise combinations.
% Pairwise and Grouped Counts cognostics address how often pieces of information occur.  Pairwise Counts look at the combinations of the $X$ and $Y$ variables.  The Univariate Continous Cognostics are reported on the counts of the pairwise combinations.  Grouped Counts provide Univariate Continuous Cognostics for how often a group is used.  This is very similar to Univariate Discrete Cognostics begin applied to the grouping variable only.

<< cog_group_pairwise_counts >>=
auto_cog("pairwise_counts", americas$country, round(americas$lifeExp))
@
% auto_cog("grouped_counts", gap_max$country, gap_max$continent)

\subsubsection{Count Testing Cognostics}

  There are three types of count testing cognostic groupings.  In addition to the Univariate Continuous cognostic information, each cognostic group tests whether or not the variables involved in the plot have any effect on the number of counts.  This is calculated using a $\chi^2$ test where $H_0 = Y ~ \mu$.

  \begin{itemize}

    \item Histogram Counts Cognostics

    The univariate case calculates the counts of a histogram using a default binwidth of 30 equal bin widths.  The default width of 30 matches the default width in \ggplot.

% << echo = FALSE, verbose = FALSE, cache = FALSE >>=
% options(width = 64)
% @
<< cog_group_histogram_counts >>=
auto_cog("histogram_counts", americas$lifeExp)
@

    \item Square Counts Cognostics

    The bivariate case of the histogram is a 2D square grid.  The counts in each of the grid spaces are calculated using a default binwidth of 30 equal intervals along each axis.  In the example below, six equally spaced bins along each axis are used.

<< cog_group_square_counts >>=
auto_cog(
  "square_counts",
  americas$year, americas$lifeExp,
  bins = 6
)
@

    \item Hexagon Counts Cognostics

    The second bivariate histogram has a honeycomb like array of hexagons.  Like the Square Counts Cognostics, the Hexagon Counts Cognostics default to 30 equally spaced hexagons along each axis.  The example below also uses six hexagon shaped bins along each axis.

<< cog_group_hex_counts >>=
auto_cog("hex_counts", americas$year, americas$lifeExp, bins = 6)
@
% << echo = FALSE, verbose = FALSE, cache = FALSE >>=
% options(width = 69)
% @



  \end{itemize}




\section{\ggplot~layer matching}

\ggplot~has already been integrated into the \autocogs~R package.  This integration contains the mapping of each cognostic group to each \ggplot~geom layer.  Each plotting framework has its own data personality and may display cognostics how it sees fit.

Below is a mapping of each \ggplot~geom layer to each of the univariate cognostics.  Geoms that do not map to any cognostic groups are considered building block geoms and do not produce any cognostics when added as a layer.

\includegraphics[width=\textwidth]{./dot/ggplot_cognostics.png}




In this section, I will explore a simple \ggplot~histogram and a more advanced example involving a \ggplot~scatterplot and linear model.

\subsection{Histogram}

First, let us create the data set containing each of the panels.  Each panel will display a histogram chart of the life expectancy over time for each continent. Figure~\ref{fig:continent_hist} displays the panel where continent is equal to \rinline{"Americas"}.

<< continent_hist, fig.width = 5, fig.height = 3.75, out.width = "4in", out.height = "3in", fig.cap = "The \\rinline{\"Americas\"} histogram of life expectancy." >>=
gapminder %>%
  group_by(continent) %>%
  do(
    panel = ggplot(., aes(lifeExp)) + geom_histogram(binwidth = 1)
  ) %>%
  print() ->
continent_hists
americas_pos <- which(continent_hists$continent == "Americas")
continent_hists$panel[[americas_pos]]
@

With a nested \rinline{data.frame} full of panels, we add the cognostics to the \rinline{data.frame}.

<< continent_hists_cogs >>=
continent_hists_cogs <- autocogs::add_panel_cogs(continent_hists) %>%
  print()

as.list(continent_hists_cogs[americas_pos, 3:6])
@

The output above displays all the cognostics that apply to a univariate histogram.  For a \ggplot~histogram, \autocogs~creates:
\begin{itemize}
  \item \rinline{`_x`}: univariate continuous cognostics using the $X$ data,
  \item \rinline{`_density_x`}: continuous density cognostics using the $X$ data,
  \item \rinline{`_hist_x`}: histogram counts cognostics using the $X$ data,
  \item \rinline{`_n`}: and univariate count information using the $X$ data.
\end{itemize}

While this amount of information is a little overwhelming, keep in mind the goal of the \autocogs~R package is to provide as many ways to filter and sort data that normally must be calculated manually.  \autocogs~computes cognostics that are suited to each type of visualization layer.


\subsection{Linear model and scatterplot}

In the next example, we will perform a similar workflow, but the panel will contain two layers: points and a linear model line.  Each layer is derived from the same original data, but will help produce a different sets of cognostics.

<< contry_model, fig.width = 5, fig.height = 3.75, out.width = "4in", out.height = "3in", fig.cap = "The \\rinline{\"United States\"} life expectancy over time displayed as a linear model and scatterplot combination." >>=
gapminder %>%
  group_by(country, continent) %>%
  do(
    panel = ggplot(., aes(year, lifeExp)) +
      geom_point() +
      geom_smooth(method = "lm")
  ) ->
country_model
usa_pos <- which(country_model$country == "United States")
country_model$panel[[usa_pos]]
@

The \rinline{"United States"} panel is displayed in figure~\ref{fig:country_model}.  The life expectancy has a fairly linear trend that increases over time. Next, we add the cognostics to the panel \rinline{data.frame}.

<< country_model_cogs >>=
country_model_cogs <- autocogs::add_panel_cogs(country_model) %>% print()

as.list(country_model_cogs[usa_pos, 4:10])
@

As expected, many cognostics were added to the country panel \rinline{data.frame}:

\begin{itemize}
  \item \rinline{`_scagnostic`}: scatterplot scagnostics cognostics,
  \item \rinline{`_x`}: univariate continuous cognostics using the $X$ data,
  \item \rinline{`_y`}: univariate continuous cognostics using the $Y$ data,
  \item \rinline{`_bivar`}: bivariate continuous cognostics,
  \item \rinline{`_smooth`}: smooth line cognostics,
  \item \rinline{`_lm`}: linear model cognostics,
  \item \rinline{`_n`}: and bivariate count information.
\end{itemize}

Revisiting the Linear Model Example~\ref{subsec:linear_model}, we have now exposed the linear model metrics (as well as many other metrics) to be used as cognostics within the \trelliscopejs~widget.  \trelliscopejs~will process the nested \rinline{data.frame}s as grouped cognostics and display them in the application.  Each linear model's $R^2$ value is now available for sorting.  By opening the ``Sort'' tab in the widget and selecting \emph{ascending} \rinline{r2}, all countries will be displayed in increasing order of the $R^2$ value.  Figure~\ref{fig:country_model_r2} displays the countries whose life expectancy can not be not explained by a linear model.

\begin{figure}[H]
  \centering
  \includegraphics[height=4in]{./figs/tjs_country_r2.png}
  \caption{A \trelliscopejs~widget of country life expectancy over time where the panel ordering is displayed according to ascending $R^2$ value of each panels linear model.}
  \label{fig:country_model_r2}
\end{figure}



In less than ten lines of code we went from a single data set to a full fledge visualization application with multiple cognostics explaining the plot used with each conditioned subset.


\section{Summary}

  Automatic cognostics with the \autocogs~R package allow users to enable common univariate metrics that correspond to the plots displayed in a \trelliscopejs~HTML widget. \autocogs~provides users with the ability to retrieve statistical metrics that are displayed or utilized in a plot.  Prior examples generated cognostics for simple histograms to multiple layered, linear model and scatterplot plots. Maintaining a common set of cognostics provides a cohesive cognostic framework to be used by any plotting architecture.

  % TODO hard to transition into graphql


% TODO add transition / conclusion paragraph


% \subsection{Caluclations}
%
%
%
%
%
%
%
%
%
%
%
%
%
%
%
%
%
%
%
%
%
%
%
%
%
%
% Using the \rinline{gapminder} data set as an example, we can explore the linear model trend of the life expectancy over time.
%
% %\trelliscopejs~has integrated functionality with \ggplot, so we will reduce the amount of code using the function \rinline{facet_trelliscope}.
%
% << all_info  >>=
% gapminder_condensed %>%
%   mutate(
%     # add metrics
%     min_lifeExp = purrr::map_dbl(data, function(dt) min(dt$lifeExp)),
%     max_lifeExp = purrr::map_dbl(data, function(dt) max(dt$lifeExp)),
%     # add panel
%     panel = map_plot(data, function(dt) {
%       # display a line plot of X:year, Y:life expectancy
%       ggplot(dt, aes(year, lifeExp)) +
%         geom_smooth(method = "lm") +
%         geom_line() +
%         ylim(20, 85)
%     })
%   ) %>%
%   # remove the condensed data
%   select(-data) %>%
%   print() ->
% gap_trellis
%
% # display the plots and metrics in trelliscopejs
% gap_trellis %>%
%   trelliscope("gapminder", nrow = 3, ncol = 5, path = "ex/gapminder")
% @
%
% << lm_facet >>=
% gapminder %>%
%   ggplot(aes(year, lifeExp)) +
%     geom_line() +
%     geom_smooth(method = "lm") +
%     facet_trelliscope(~ continent + country, nrow = 3, ncol = 5, path = "ex/gapminder_facet")
% @
%
% Each panel contains a linear model that can be used to interpret each countries' life expectancy over time.  The linear model information contained within each panel is not calculated until \ggplot~displays the plot.  Information within each model can be useful when sorting panels within \trelliscopejs.  This
